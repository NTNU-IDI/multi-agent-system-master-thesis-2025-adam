module P2Engine.Ledger where

import Daml.Script
import DA.Time
import DA.Text

-- Main wallet template for agents
template AgentWallet
  with
    party : Party
    agent : Text  -- Agent ID
    balance : Decimal
    created : Int
  where
    signatory party
    
    -- Unique key per agent
    key (party, agent) : (Party, Text)
    maintainer key._1
    
    -- Ensure positive balance
    ensure balance >= 0.0
    
    -- Transfer funds to another wallet
    choice Transfer : (ContractId AgentWallet, ContractId TransferRecord)
      with
        toWalletId : ContractId AgentWallet
        amount : Decimal
        reason : Text
        timestamp : Int
      controller party
      do
        -- Validate transfer
        assertMsg "Amount must be positive" (amount > 0.0)
        assertMsg "Insufficient balance" (balance >= amount)
        
        -- Fetch target wallet
        toWallet <- fetch toWalletId
        
        -- Archive this wallet and create a new one with updated balance
        newFromWallet <- create this with balance = balance - amount
        
        -- Archive the target wallet and create a new one with updated balance
        archive toWalletId
        newToWallet <- create toWallet with 
          balance = toWallet.balance + amount
        
        -- Record the transfer
        transferRecord <- create TransferRecord with
          party = party
          fromAgent = agent
          toAgent = toWallet.agent
          amount = amount
          reason = reason
          timestamp = timestamp
          
        return (newFromWallet, transferRecord)
    
    -- Check balance (non-consuming)
    nonconsuming choice GetBalance : Decimal
      controller party
      do return balance

-- Immutable transfer record
template TransferRecord
  with
    party : Party
    fromAgent : Text
    toAgent : Text
    amount : Decimal
    reason : Text
    timestamp : Int
  where
    signatory party

-- System metrics contract (singleton)
template SystemMetrics
  with
    party : Party
    totalVolume : Decimal
    transactionCount : Int
    lastUpdated : Int
  where
    signatory party
    
    key party : Party
    maintainer key
    
    -- Update metrics after a transfer
    choice UpdateMetrics : ContractId SystemMetrics
      with
        volumeDelta : Decimal
      controller party
      do
        create this with
          totalVolume = totalVolume + volumeDelta
          transactionCount = transactionCount + 1
          lastUpdated = lastUpdated

-- Helper to get or create wallet
getOrCreateWallet : Party -> Text -> Decimal -> Int -> Script (ContractId AgentWallet)
getOrCreateWallet party agentId initialBalance timestamp = do
  optWallet <- queryContractKey @AgentWallet party (party, agentId)
  case optWallet of
    Some (cid, _) -> return cid
    None -> submit party do
      createCmd AgentWallet with
        party = party
        agent = agentId
        balance = initialBalance
        created = timestamp

-- Test setup
setup : Script ()
setup = do
  p2engine <- allocateParty "p2engine"
  
  -- Create initial wallets using the helper
  wallet1 <- getOrCreateWallet p2engine "agent_alpha" 100.0 1704067200
  wallet2 <- getOrCreateWallet p2engine "agent_beta" 100.0 1704067200
      
  -- Test transfer
  submit p2engine do
    exerciseCmd wallet1 Transfer with
      toWalletId = wallet2
      amount = 25.0
      reason = "Test transfer"
      timestamp = 1704067260
      
  return ()